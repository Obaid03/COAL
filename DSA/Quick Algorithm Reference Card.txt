=== ALGORITHM COMPLEXITY REFERENCE ===

SORTING ALGORITHMS:
┌─────────────────┬─────────────┬─────────────┬─────────────┬───────────────┐
│ Algorithm       │ Best Case   │ Average     │ Worst Case  │ Space Complex │
├─────────────────┼─────────────┼─────────────┼─────────────┼───────────────┤
│ Bubble Sort     │ O(n)        │ O(n²)       │ O(n²)       │ O(1)          │
│ Selection Sort  │ O(n²)       │ O(n²)       │ O(n²)       │ O(1)          │
│ Insertion Sort  │ O(n)        │ O(n²)       │ O(n²)       │ O(1)          │
│ Merge Sort      │ O(n log n)  │ O(n log n)  │ O(n log n)  │ O(n)          │
│ Quick Sort      │ O(n log n)  │ O(n log n)  │ O(n²)       │ O(log n)      │
└─────────────────┴─────────────┴─────────────┴─────────────┴───────────────┘

SEARCHING ALGORITHMS:
┌─────────────────┬─────────────┬─────────────┬─────────────┬───────────────┐
│ Algorithm       │ Best Case   │ Average     │ Worst Case  │ Prerequisite  │
├─────────────────┼─────────────┼─────────────┼─────────────┼───────────────┤
│ Linear Search   │ O(1)        │ O(n)        │ O(n)        │ None          │
│ Binary Search   │ O(1)        │ O(log n)    │ O(log n)    │ Sorted Array  │
└─────────────────┴─────────────┴─────────────┴─────────────┴───────────────┘

KEY POINTS FOR EXAM:
• Bubble Sort: Compare adjacent elements, swap if wrong order
• Selection Sort: Find minimum, place at beginning
• Insertion Sort: Insert each element into correct position in sorted portion
• Linear Search: Check each element sequentially
• Binary Search: Divide search space in half each time (REQUIRES SORTED ARRAY)
